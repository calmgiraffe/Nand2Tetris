@256
D=A
@SP
M=D
// null
@null$ret.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(null$ret.0)
@Sys.init
0;JMP
// function Class1.set 0
(Class1.set)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 0
@SP
AM=M-1
D=M
@Class1.0
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@SP
AM=M-1
D=M
@Class1.1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@frame
M=D
// pseudo-assembly: retAddress = *(frame - 5)
@frame
D=M
@5
A=D-A
D=M
@retAddress
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
// pseudo-assembly: THAT = *(frame - 1)
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
// pseudo-assembly: THIS = *(frame - 2)
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
// pseudo-assembly: ARG = *(frame - 3)
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
// pseudo-assembly: LCL = *(frame - 4)
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddress
A=M
0;JMP
// function Class1.get 0
(Class1.get)
// push static 0
@Class1.0
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Class1.1
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// return
@LCL
D=M
@frame
M=D
// pseudo-assembly: retAddress = *(frame - 5)
@frame
D=M
@5
A=D-A
D=M
@retAddress
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
// pseudo-assembly: THAT = *(frame - 1)
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
// pseudo-assembly: THIS = *(frame - 2)
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
// pseudo-assembly: ARG = *(frame - 3)
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
// pseudo-assembly: LCL = *(frame - 4)
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddress
A=M
0;JMP
// function Class2.set 0
(Class2.set)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 0
@SP
AM=M-1
D=M
@Class2.0
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@SP
AM=M-1
D=M
@Class2.1
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@frame
M=D
// pseudo-assembly: retAddress = *(frame - 5)
@frame
D=M
@5
A=D-A
D=M
@retAddress
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
// pseudo-assembly: THAT = *(frame - 1)
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
// pseudo-assembly: THIS = *(frame - 2)
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
// pseudo-assembly: ARG = *(frame - 3)
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
// pseudo-assembly: LCL = *(frame - 4)
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddress
A=M
0;JMP
// function Class2.get 0
(Class2.get)
// push static 0
@Class2.0
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@Class2.1
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// return
@LCL
D=M
@frame
M=D
// pseudo-assembly: retAddress = *(frame - 5)
@frame
D=M
@5
A=D-A
D=M
@retAddress
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
// pseudo-assembly: THAT = *(frame - 1)
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
// pseudo-assembly: THIS = *(frame - 2)
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
// pseudo-assembly: ARG = *(frame - 3)
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
// pseudo-assembly: LCL = *(frame - 4)
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddress
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Class1.set 2
@Sys.init$ret.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@2
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(Sys.init$ret.1)
// pop temp 0 // Dumps the return value
@SP
AM=M-1
D=M
@R5
M=D
// push constant 23
@23
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// call Class2.set 2
@Sys.init$ret.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@2
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(Sys.init$ret.2)
// pop temp 0 // Dumps the return value
@SP
AM=M-1
D=M
@R5
M=D
// call Class1.get 0
@Sys.init$ret.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(Sys.init$ret.3)
// call Class2.get 0
@Sys.init$ret.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(Sys.init$ret.4)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0;JMP
